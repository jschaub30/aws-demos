AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  WebAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred  # Fix: Set ownership control to ensure the bucket owner owns all objects

  # allow public access to the webapp files
  WebAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebAppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebAppBucket}/*"

  # S3 Bucket Resource with EventBridge enabled
  S3DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - '*'
            ExposedHeaders:
              - ETag
            MaxAge: 3000
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteObjectsAfter48Hours
            Status: Enabled
            ExpirationInDays: 2
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2

  # DynamoDB Table
  DocumentConversionJobsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "DocumentConversionJobs"
      AttributeDefinitions:
        - AttributeName: "job_id"
          AttributeType: "S"
        - AttributeName: "created_at"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "job_id"
          KeyType: "HASH"
        - AttributeName: "created_at"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      Tags:
        - Key: "Environment"
          Value: "Production"
        - Key: "Project"
          Value: "DocumentConversion"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # EventBridge Rule to trigger the Convert Lambda function
  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref S3DataBucket
          object:
            key:
              - prefix: "input/"
      Targets:
        - Arn: !GetAtt Convert.Arn
          Id: "ConvertFunctionTarget"
      State: ENABLED

  # Define the API Gateway and enable CORS globally for all methods
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # First Lambda function (API Gateway integration)
  GenPresignedUrl:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: ./src/lambda/gen_presigned_url/
      Timeout: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentConversionJobsTable
          BUCKET_NAME: !Ref S3DataBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /job
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${S3DataBucket}/*"
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DocumentConversionJobsTable}"

  # Second Lambda function (API Gateway integration)
  QueryJobs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 5
      CodeUri: ./src/lambda/query_jobs/
      Environment:
        Variables:
          TABLE_NAME: !Ref DocumentConversionJobsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /job
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DocumentConversionJobsTable}"

  # Lambda Layer for Tesseract
  TesseractLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: TesseractLayer
      Description: Tesseract bin and libraries
      ContentUri: ./src/lambda/layers/tesseract-layer-x86_64.zip
      CompatibleRuntimes:
        - python3.12

  # Lambda Layer for Poppler
  PopplerLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PopplerLayer
      Description: Poppler bin and libraries
      ContentUri: ./src/lambda/layers/poppler-layer-x86_64.zip
      CompatibleRuntimes:
        - python3.12

  # Third Lambda function (Convert function with 512MB memory)
  Convert:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 512
      Timeout: 60
      CodeUri: ./src/lambda/convert/
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3DataBucket
          LD_LIBRARY_PATH: "/opt/lib:/opt/lib64"
          PATH: "/opt/bin"
          TESSDATA_PREFIX: "/opt/tessdata"
          TABLE_NAME: !Ref DocumentConversionJobsTable
      Layers:
        - !Ref TesseractLambdaLayer
        - !Ref PopplerLambdaLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${S3DataBucket}/*"
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DocumentConversionJobsTable}"

  ConvertInvokeByEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Convert.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadEventRule.Arn

Outputs:
  S3BucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref S3DataBucket

  GenPresignedUrlArn:
    Description: "ARN of GenPresignedUrl Lambda function"
    Value: !GetAtt GenPresignedUrl.Arn

  ConvertArn:
    Description: "ARN of Convert Lambda function"
    Value: !GetAtt Convert.Arn

  QueryJobsArn:
    Description: "ARN of QueryJobs Lambda function"
    Value: !GetAtt QueryJobs.Arn

  WebAppBucketName:
    Description: "S3 Bucket name for the static website"
    Value: !Ref WebAppBucket

  WebAppURL:
    Description: "URL of the static website"
    Value: !GetAtt WebAppBucket.WebsiteURL

  ApiGatewayURL:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/job"
